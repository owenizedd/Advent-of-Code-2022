const algo = require('algorithms');

//setup 

function p(...args) { console.log(...args) }

const ds = algo.DataStructures
const maxHeap = new ds.Heap.MaxHeap()
const minHeap = new ds.Heap.MinHeap()
const graph = new ds.Graph(true) // false to undirected
const binarySearch = algo.Search.binarySearch; // function returns -1 if not found
const set = new Set();
const pq = new ds.PriorityQueue();


const input_main = `L 1
R 1
U 1
R 1
L 1
U 2
L 2
R 1
U 2
D 2
R 2
D 2
R 1
U 1
R 2
L 1
D 1
L 2
R 1
D 1
R 1
U 1
D 1
R 1
D 1
R 1
D 2
L 2
D 1
R 2
L 1
R 2
U 2
R 1
U 1
D 2
U 1
R 1
D 1
R 2
D 1
L 2
R 1
U 1
L 1
U 1
D 1
U 1
D 1
L 1
D 1
R 1
D 2
L 1
D 1
L 1
D 1
R 1
U 1
D 2
R 1
D 1
L 2
D 2
U 1
L 1
U 1
L 1
R 2
U 1
L 1
D 1
R 2
L 2
U 1
D 2
R 1
U 1
R 2
L 2
U 1
L 2
R 2
D 1
L 1
R 1
D 2
L 2
U 1
L 2
R 1
U 2
D 1
U 2
D 2
L 2
D 1
R 1
L 2
R 2
L 2
R 2
L 2
R 2
L 1
U 1
R 2
U 1
D 1
R 2
D 2
R 2
D 2
L 2
R 2
U 3
R 1
U 3
D 3
U 1
L 2
D 2
R 3
D 1
R 3
U 1
L 3
R 3
L 1
U 3
R 3
U 3
R 3
U 2
L 2
D 2
R 3
U 2
L 2
U 3
L 2
R 1
U 3
R 2
U 3
L 2
R 2
U 1
L 3
R 3
L 3
R 2
L 3
D 3
L 2
D 1
R 1
D 3
U 3
R 3
D 2
L 2
D 2
R 1
D 1
U 3
R 1
U 2
L 3
U 3
L 2
D 1
L 3
R 2
D 2
L 2
D 3
L 3
U 1
D 3
U 3
L 3
R 2
D 2
R 3
D 2
R 3
U 2
R 1
L 2
R 2
L 1
D 3
U 2
L 2
U 3
L 1
D 1
L 2
R 3
L 1
D 2
U 1
D 3
U 1
D 3
L 1
U 1
R 3
L 2
U 3
L 3
U 1
L 2
D 1
R 2
L 1
R 2
L 2
D 3
U 2
D 2
U 3
L 4
D 4
R 3
D 4
R 1
L 2
U 2
R 1
U 4
D 4
U 4
D 4
R 4
L 2
U 3
D 1
R 4
D 2
L 2
D 1
L 4
R 3
U 2
D 4
U 3
R 3
L 1
R 1
L 2
D 4
U 2
R 1
L 3
D 3
R 4
U 2
L 1
D 3
R 4
D 2
U 3
D 1
L 2
D 2
R 2
D 3
R 2
U 2
R 1
L 1
U 2
D 2
U 3
D 1
U 3
D 1
R 4
D 2
U 1
L 3
D 4
R 3
D 4
U 2
D 1
R 2
U 3
L 3
D 1
U 2
L 3
D 1
L 3
D 1
U 1
D 4
R 1
D 4
L 2
R 3
D 4
R 2
L 3
D 4
U 3
L 4
U 1
L 3
R 1
L 1
D 2
L 1
U 2
D 3
L 1
R 4
L 1
D 2
U 2
L 3
U 3
L 1
R 4
U 3
D 3
R 1
L 2
R 4
U 2
L 3
U 4
L 2
R 4
D 5
U 1
R 2
D 5
L 5
R 1
D 3
U 3
L 3
U 5
R 1
D 1
R 3
U 3
D 1
R 1
L 4
R 1
L 3
U 4
L 3
R 5
D 3
R 2
U 1
R 2
D 2
L 4
R 2
U 1
L 3
D 4
R 4
L 1
R 3
U 3
D 2
R 3
D 3
U 1
L 5
U 1
L 5
R 5
D 1
U 1
R 5
D 4
L 1
R 4
L 5
D 5
L 2
D 1
L 3
D 5
L 4
R 4
D 1
U 1
D 4
U 1
R 4
L 2
D 4
U 1
L 3
R 3
L 3
R 3
D 2
R 3
L 5
R 1
L 1
R 3
D 5
U 5
L 3
U 3
L 5
D 3
L 2
U 5
D 5
U 5
D 4
U 4
R 5
U 3
D 5
R 1
L 4
U 1
L 4
R 2
D 1
U 4
L 5
D 2
R 1
U 1
R 3
U 1
R 4
U 4
L 1
R 2
U 5
D 2
L 5
U 4
D 2
R 1
D 1
U 6
D 5
L 4
U 5
R 1
L 3
D 2
R 3
U 6
L 2
R 6
D 1
R 5
D 1
L 1
R 2
L 4
R 3
L 4
D 6
R 5
U 1
L 4
D 2
L 2
D 3
L 2
D 5
R 4
D 3
L 2
D 4
R 1
U 5
L 5
U 5
D 2
L 3
D 4
L 3
U 4
L 4
U 6
D 6
U 4
R 2
D 3
U 1
R 4
D 3
R 1
D 2
R 3
L 2
D 2
L 4
D 5
L 5
R 2
L 1
R 2
D 2
R 4
U 4
R 5
L 4
D 1
L 6
R 4
D 2
R 6
L 6
D 3
R 2
D 2
U 4
R 2
U 2
L 2
R 5
D 5
U 6
D 6
L 5
R 1
U 3
L 1
D 1
U 2
R 5
L 2
D 2
U 4
R 2
D 2
U 1
D 2
R 3
L 6
U 1
D 6
R 3
D 6
R 1
D 7
R 7
L 4
R 4
D 5
U 6
R 2
L 3
R 5
L 5
U 6
D 3
U 5
D 3
U 5
R 7
L 5
U 7
L 6
U 5
D 1
L 7
U 6
L 3
D 1
L 6
U 4
D 1
U 1
R 1
L 3
D 6
L 6
R 3
D 3
U 2
R 1
D 6
U 7
R 6
L 4
R 4
D 7
R 1
D 5
U 6
D 4
R 6
L 2
U 4
D 7
R 5
D 6
U 7
R 6
D 6
U 1
D 4
L 2
U 2
R 7
U 1
L 1
U 1
L 7
D 3
U 5
D 5
L 1
D 4
L 3
U 7
L 6
R 7
U 6
R 1
L 3
R 1
D 3
L 7
R 4
L 3
D 2
L 7
D 2
R 5
L 7
D 6
L 6
D 3
L 3
D 5
U 3
L 5
R 6
L 1
U 5
R 4
U 2
D 3
R 5
L 4
U 5
D 7
R 1
L 3
U 5
D 3
L 6
R 2
L 2
U 6
R 3
U 7
R 3
D 1
L 2
U 7
L 6
D 3
L 8
R 6
D 3
L 5
R 5
U 5
R 8
D 7
R 7
U 8
L 5
D 6
R 6
L 6
D 8
U 1
R 4
L 3
R 6
L 6
D 5
R 4
D 8
L 4
R 4
D 3
L 2
U 6
L 8
R 1
U 5
L 4
D 8
R 6
D 5
U 6
L 5
R 1
L 8
U 7
R 6
D 4
U 2
D 8
U 3
D 7
R 6
D 8
R 8
U 8
D 7
L 3
D 4
L 1
U 4
R 4
U 2
D 6
R 1
D 8
R 2
D 4
R 5
L 1
R 7
L 3
D 1
U 1
R 7
U 5
D 1
L 2
R 8
D 8
L 5
U 8
D 4
L 5
D 3
U 2
L 7
R 2
L 5
U 3
R 3
U 6
R 6
D 4
R 3
U 4
D 5
U 6
R 3
L 4
R 5
L 4
R 8
U 6
L 6
U 1
L 5
R 3
U 1
D 5
U 8
R 1
L 2
R 3
L 8
U 6
L 4
R 3
L 3
R 7
L 9
D 5
R 8
L 5
U 7
D 7
R 6
L 8
U 4
D 5
R 8
L 4
R 8
U 9
R 9
L 8
D 9
L 9
D 6
R 1
L 8
U 4
L 6
U 5
R 9
L 5
D 6
R 9
D 9
U 6
L 1
U 8
L 7
R 9
U 4
R 6
U 1
R 5
U 5
L 4
R 4
D 7
L 6
U 3
R 9
U 1
L 6
U 5
L 5
U 2
L 3
U 2
D 6
R 8
L 5
U 4
D 4
R 4
D 6
L 8
U 9
R 4
L 3
D 1
U 2
D 5
U 3
D 3
L 2
D 3
L 4
D 5
L 9
D 9
U 2
D 8
R 4
L 8
R 9
D 7
L 3
D 2
R 2
L 4
D 7
R 6
D 8
R 9
L 3
D 5
U 1
L 8
D 6
R 9
U 6
R 9
D 6
L 9
U 5
D 10
L 4
U 10
R 3
U 7
D 4
L 3
R 8
L 4
U 10
R 8
L 10
U 8
R 5
L 8
U 6
L 5
D 7
L 6
U 6
L 9
R 8
U 6
D 7
L 10
R 2
D 7
L 8
U 5
L 2
D 2
U 7
D 6
R 7
D 2
U 3
R 10
D 2
U 6
D 6
L 8
D 2
L 2
D 10
L 2
D 1
L 10
D 6
R 6
L 7
D 9
R 2
D 5
U 2
R 4
L 4
D 1
L 3
R 10
U 9
L 4
D 10
L 10
D 4
U 2
R 1
L 4
D 6
U 2
L 6
R 4
U 1
L 9
R 7
L 8
U 5
R 1
D 6
L 4
U 9
D 1
L 5
R 10
D 4
L 6
U 8
R 4
L 5
D 10
R 8
D 8
R 4
D 5
R 7
L 10
D 3
R 1
L 4
R 8
L 10
D 2
L 3
D 6
L 8
R 10
L 2
D 8
R 5
L 8
D 1
U 6
D 11
U 7
L 1
U 6
R 9
L 8
R 5
U 9
D 5
L 10
U 6
L 3
D 4
U 6
D 10
L 2
D 9
L 5
R 8
D 1
R 1
U 1
D 4
R 4
U 6
L 9
U 7
R 11
L 8
D 3
R 9
L 11
U 9
L 4
D 10
U 9
L 7
R 9
U 1
R 8
U 4
L 3
U 2
D 7
R 6
U 1
D 10
U 9
R 6
L 6
D 4
U 3
L 10
R 10
U 6
R 8
L 9
R 2
D 7
R 4
U 6
R 2
L 4
D 1
L 10
U 9
R 11
U 11
R 1
D 5
L 8
U 3
R 1
U 4
D 10
U 6
L 8
R 4
L 7
R 8
D 3
L 9
U 4
L 6
R 2
D 2
U 9
D 6
R 8
L 2
U 7
L 2
R 8
L 7
D 5
R 10
U 5
L 10
U 6
R 8
U 9
L 7
D 11
U 10
L 4
D 5
R 4
L 7
U 5
D 8
R 6
D 9
L 4
U 9
R 6
D 1
U 6
R 8
U 10
D 6
U 10
L 3
D 1
L 1
R 9
D 10
L 10
U 12
D 3
L 2
U 6
L 9
U 2
R 6
D 8
R 11
L 1
U 3
R 1
U 9
R 12
U 3
D 11
U 3
D 10
U 12
L 11
R 9
U 9
D 11
L 8
D 4
R 4
U 4
D 1
L 7
R 10
L 4
R 4
U 11
D 3
L 6
R 10
L 9
R 11
U 6
D 2
U 2
L 3
D 11
U 6
D 12
L 5
R 5
D 6
R 5
U 2
R 8
L 7
D 7
R 3
D 8
U 6
D 1
U 1
D 4
L 3
D 12
L 8
D 8
U 7
R 1
D 10
L 5
D 7
L 1
U 4
R 12
L 8
U 2
L 2
U 1
L 8
U 3
L 12
R 3
D 11
R 1
U 4
D 12
L 3
U 2
R 5
U 2
R 7
U 8
L 5
R 1
D 5
R 12
D 8
R 9
D 7
L 2
R 2
U 9
D 6
U 6
R 2
D 2
R 9
D 4
R 12
D 13
R 9
L 3
D 8
L 13
U 2
R 10
U 12
D 12
U 3
L 6
D 8
U 1
L 12
D 9
L 7
R 2
D 4
R 5
L 7
R 12
U 4
L 7
D 4
U 10
L 2
D 1
U 5
R 5
U 2
L 9
D 10
L 1
R 7
L 6
D 1
L 12
R 6
U 10
R 2
D 10
R 5
L 3
R 8
D 1
R 12
L 7
U 5
L 11
D 4
U 11
D 1
U 11
L 1
D 11
U 11
D 4
U 8
R 5
D 6
L 12
R 5
D 10
L 2
D 5
R 10
U 6
D 6
R 4
D 7
L 2
D 5
U 2
R 9
L 11
U 13
D 9
L 11
D 8
L 2
D 4
R 13
L 5
U 12
R 11
U 5
L 8
U 5
D 7
U 1
R 9
D 4
U 3
R 9
L 3
D 7
R 8
D 7
L 2
U 4
L 12
U 13
L 12
R 8
L 3
R 12
L 4
U 12
R 13
D 10
L 8
U 12
R 5
L 1
U 2
L 3
U 2
D 12
L 12
U 11
L 2
R 6
U 3
L 2
R 7
U 7
L 3
R 8
L 11
D 2
U 1
R 12
D 1
R 4
L 13
U 14
R 14
D 12
R 12
D 11
L 11
U 2
L 6
D 8
L 5
D 7
R 2
L 14
U 12
R 13
L 7
D 2
U 4
D 5
R 5
L 7
R 7
U 1
R 10
D 11
L 7
U 2
R 5
L 11
U 11
R 9
U 9
R 12
D 14
R 5
L 9
U 2
D 12
L 6
U 7
R 5
L 10
D 10
U 4
D 13
L 13
D 3
R 8
D 10
U 12
L 14
U 7
D 6
R 4
U 11
R 2
L 5
D 12
R 4
L 4
D 5
L 12
U 3
L 3
U 7
R 4
L 2
R 7
L 5
D 5
R 9
L 5
D 12
R 3
U 1
D 6
U 2
R 10
L 4
U 12
R 15
L 2
R 3
D 8
L 13
D 3
R 5
D 5
L 5
U 7
L 4
R 10
D 11
L 3
R 1
U 4
D 15
L 8
U 10
L 5
D 1
R 5
D 15
R 3
U 9
R 4
D 3
L 15
U 6
D 10
U 2
R 6
U 10
L 12
R 8
D 12
R 14
U 10
D 1
L 1
D 8
U 3
R 11
D 7
L 5
D 14
R 1
D 8
R 6
U 6
D 1
U 14
R 12
L 5
U 5
L 14
U 1
D 3
R 6
U 4
R 9
L 13
R 2
U 10
R 11
U 7
D 8
U 14
L 4
R 3
U 6
R 2
D 14
U 10
D 13
U 8
R 12
L 12
U 6
L 4
U 5
D 6
U 8
L 12
D 1
L 3
R 4
L 11
R 5
D 3
U 6
D 15
R 14
U 8
R 10
U 15
R 13
L 13
U 4
D 3
U 4
D 1
U 5
R 5
D 4
R 2
D 13
R 7
D 10
U 3
R 15
D 3
U 13
R 16
U 2
D 6
L 13
R 8
L 5
R 1
U 7
R 6
U 6
R 10
U 5
L 14
R 12
U 8
R 13
U 4
L 10
R 16
L 15
D 7
R 14
D 8
U 8
L 15
R 2
U 11
L 6
R 6
D 2
U 9
D 12
L 10
U 7
R 8
L 4
D 5
R 13
L 9
U 15
D 11
R 11
D 8
L 10
R 14
D 3
R 10
U 1
R 11
L 16
R 12
D 15
L 13
U 2
L 11
U 15
D 9
R 1
D 13
L 16
U 9
D 2
R 5
U 9
R 11
L 16
U 5
R 11
U 8
L 15
U 1
L 11
U 3
L 4
U 9
L 5
U 11
D 9
U 4
L 14
U 8
L 16
D 9
U 5
L 14
R 13
U 8
L 4
R 9
L 4
R 7
D 15
U 14
D 8
U 6
R 11
L 15
D 10
R 2
L 12
R 11
D 7
R 11
L 4
R 4
D 4
R 3
U 15
L 6
R 8
L 5
U 13
D 6
R 1
D 15
L 9
U 2
L 13
R 10
U 8
R 15
D 16
L 13
U 13
L 12
R 10
U 16
L 10
R 14
D 17
R 4
D 16
U 17
R 8
D 10
R 11
L 10
U 17
L 11
U 3
L 4
U 2
D 10
R 15
U 1
R 5
L 12
D 4
R 1
U 15
R 13
L 17
R 15
D 4
L 14
R 3
D 1
U 14
R 11
D 12
L 7
D 11
R 12
U 1
R 5
L 11
D 9
U 8
R 1
U 4
L 15
R 12
U 17
R 4
U 14
L 4
D 16
R 9
U 9
D 11
L 7
D 16
R 10
L 10
R 15
U 10
R 6
L 4
R 6
L 12
U 9
R 15
D 12
L 14
U 14
D 6
U 4
R 17
U 2
L 5
R 13
D 15
U 13
L 5
D 3
L 7
U 12
R 13
D 15
U 15
L 17
U 17
L 6
R 2
U 17
R 7
L 15
U 17
R 11
L 2
U 1
D 4
U 2
R 10
L 9
D 18
U 5
D 7
R 18
L 11
D 2
U 13
D 12
R 10
D 2
R 9
L 3
D 9
R 9
L 17
R 4
L 7
D 16
L 5
R 3
L 8
U 7
R 8
L 1
D 12
U 13
R 8
D 18
U 7
R 6
D 7
L 7
D 8
R 16
L 13
R 6
U 1
L 9
U 9
L 12
D 13
R 18
L 7
D 18
U 17
R 18
D 11
R 1
D 4
U 3
L 7
D 17
R 8
U 11
D 7
L 4
R 12
U 10
L 15
R 14
U 16
D 4
L 10
U 6
D 18
R 7
U 13
R 11
D 14
L 5
U 5
L 7
R 15
L 16
U 6
D 9
L 17
R 4
L 16
D 10
U 16
D 17
R 7
L 16
U 6
L 15
R 13
U 8
L 14
R 12
U 5
D 17
R 13
D 12
U 12
L 16
R 8
U 4
D 6
U 10
D 14
R 18
L 17
U 15
L 5
U 7
D 15
U 10
R 18
L 11
D 10
R 12
U 15
D 11
U 7
D 3
R 2
U 5
R 12
U 15
R 12
U 19
L 6
U 18
D 8
L 7
D 2
R 1
L 16
D 5
L 9
U 11
L 6
U 7
L 2
D 18
L 1
U 19
D 15
U 8
R 5
U 13
L 7
R 14
U 2
D 10
U 16
D 3
R 8
L 10
D 17
U 16
D 6
R 18
D 5
L 5
D 4
L 6
U 17
D 7
R 15
D 5
R 18
L 6
U 15
L 3
U 13
L 15
R 5
D 9
R 11
U 15
L 19
D 11
L 8
D 14
R 7
L 16
D 5
R 13
D 5
L 9
D 3
L 3
R 12
U 17
R 8
L 11
U 2
R 9
L 3
D 6
L 9
U 11
R 6
U 19
R 6
L 12
U 5
R 4
U 4
L 16
R 17
D 12
U 11
R 4
D 11
U 4
R 8
U 9
R 12
U 13
L 2
D 9
L 2`
const input_sample = `R 5
U 8
L 8
D 3
R 17
D 10
L 25
U 20`

const inp = input_main.split('\n');


const T = [
  { x: 0, y: 0 },
  { x: 0, y: 0 },
  { x: 0, y: 0 },
  { x: 0, y: 0 },
  { x: 0, y: 0 },
  { x: 0, y: 0 },
  { x: 0, y: 0 },
  { x: 0, y: 0 },
  { x: 0, y: 0 },
  { x: 0, y: 0 },
]
let vis = { '0 - 0': true }
let h = [1, 0, -1, 0]
let v = [0, 1, 0, -1]

function getDist(H, T) {
  return Math.floor(Math.sqrt(Math.pow(H.x - T.x, 2) + Math.pow(H.y - T.y, 2)))
}
function shouldMoveTail(H, T) {
  return getDist(H, T) >= 2
}
function handleKnots(dir) {

  for (let i = 1; i < T.length; i++) {
    if (shouldMoveTail(T[i], T[i - 1])) {
      const H = T[i - 1];
      const moveDiagonal = T[i].x !== H.x && T[i].y !== H.y;
      // if (debg > 4) p(moveDiagonal)
      if (moveDiagonal) {
        let tl = { x: T[i].x - 1, y: T[i].y - 1 }
        let tr = { x: T[i].x + 1, y: T[i].y - 1 }
        let bl = { x: T[i].x - 1, y: T[i].y + 1 }
        let br = { x: T[i].x + 1, y: T[i].y + 1 }
        const dirs = [tl, tr, bl, br]
        let min = 100000;
        let selected = {}
        dirs.forEach(dir => {
          if (min > getDist(H, dir)) {
            min = getDist(H, dir);
            selected = dir
          }
        })
        T[i] = selected;
        // p(selected)
      }
      else {
        if (T[i].x == H.x) {
          if (T[i].y > H.y) {
            T[i].y = H.y + 1;
          }
          else if (T[i].y < H.y) T[i].y = H.y - 1;
        }
        if (T[i].y == H.y) {
          if (T[i].x > H.x)
            T[i].x = H.x + 1;
          else if (T[i].x < H.x)
            T[i].x = H.x - 1;
        }
      }
    }
  }

}
function move(dir, amt) {
  let dirMapping = {
    'R': 0,
    'U': 3,
    'L': 2,
    'D': 1
  }
  let xMove = h[dirMapping[dir]]
  let yMove = v[dirMapping[dir]]
  for (let i = 1; i <= amt; i++) {
    T[0].x += xMove;
    T[0].y += yMove;
    handleKnots(dir)
    vis[`${T[9].y} - ${T[9].x}`] = true;

  }
}
function solve() {
  inp.forEach(line => {
    const [dir, amt] = line.split(' ');
    move(dir, +amt);
  })
}


solve();

// p(T)
// p(vis);
p(Object.keys(vis).length)